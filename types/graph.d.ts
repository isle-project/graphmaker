/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type NodeShape =
  | "circle"
  | "double-circle"
  | "square"
  | "diamond"
  | "triangle"
  | "ellipse"
  | "rectangle"
  | "invisible";
/**
 * Width to height ratio of a node; if not specified, the ratio is 1
 */
export type NodeWidthToHeight = number;
/**
 * Node size relative to a base size; if not specified, the node size is 1
 */
export type NodeSize = number;
/**
 * A HEX color or RGB color such as rgb(255,255,255) for the stroke
 */
export type LineColor = string;
export type LineWidth = "very-thin" | "thin" | "medium" | "thick" | "very-thick";
export type LineStyle = "solid" | "dashed" | "dotted";
export type ArrowStyle = "light" | "normal" | "heavy" | "double";
/**
 * A HEX color or RGB color such as rgb(255,255,255) to fill a shape
 */
export type FillColor = string;
/**
 * Font family
 */
export type FontFamily = ("Times New Roman" | "Comic Sans MS" | "Courier New" | "Gill Sans" | "Trebuchet MS") | string;
/**
 * Font size in points
 */
export type FontSize = number;
export type FontStyle = "normal" | "italic" | "oblique";
export type FontWeight =
  | "normal"
  | "bold"
  | "bolder"
  | "lighter"
  | "100"
  | "200"
  | "300"
  | "400"
  | "500"
  | "600"
  | "700"
  | "800"
  | "900";
export type FontVariant = "normal" | "small-caps" | "titling-caps";
/**
 * A HEX color or RGB color such as rgb(255,255,255) for the font.
 */
export type FontColor = string;
/**
 * Where a string's position is anchored
 */
export type TextAnchor = "start" | "middle" | "end";
/**
 * A text or mathematical label. With a prefix 'latex:' or 'tex:', the rest of the label is interpreted as LaTeX input. With a prefix 'math:', the rest of the label is interpreted as MathLingo input. For latex/tex and math labels, use ASCII only. Otherwise, the text is used directly as a unicode string. LaTeX $ delimiters are NOT supported.
 */
export type Label = string;
/**
 * An offset from a position in units relative to the natural size of the node or edge
 */
export type Offset =
  | "none"
  | (
      | "north"
      | "northeast"
      | "east"
      | "southeast"
      | "south"
      | "southwest"
      | "west"
      | "northwest"
      | "left"
      | "right"
      | "up"
      | "down"
      | "upper-left"
      | "upper-right"
      | "lower-left"
      | "lower-right"
    )
  | [
      (
        | "north"
        | "northeast"
        | "east"
        | "southeast"
        | "south"
        | "southwest"
        | "west"
        | "northwest"
        | "left"
        | "right"
        | "up"
        | "down"
        | "upper-left"
        | "upper-right"
        | "lower-left"
        | "lower-right"
      ),
      number
    ]
  | [number, number]
  | ["polar", number, number];
/**
 * Style name(s) to be applied to an entity
 */
export type Style = string[];
/**
 * Fill pattern of a shape
 */
export type FillStyle =
  | ("solid" | "dotted" | "hashed" | "crosshatched")
  | {
      type?: "dotted";
      /**
       * Size of the dots in pixels
       */
      dotSize?: number;
      /**
       * Pixels per dot in both horizontal and vertical directions
       */
      tileSize?: number;
      [k: string]: unknown;
    }
  | {
      type?: "hashed";
      hashDirection?: "vertical" | "horizontal" | "increasing" | "decreasing";
      thickness?: number;
      [k: string]: unknown;
    }
  | {
      type?: "crosshatched";
      hatchingDirection?: "vertical" | "diagonal";
      thickness?: number;
      [k: string]: unknown;
    };

/**
 * Defines a graph with optional attributes on nodes and edges. Directed and undirected graphs are supported, as well as self-loops and multiple edges between nodes.
 */
export interface Graph {
  /**
   * `true` if graph is directed (a graph is directed if it has any directed edges), `false` if undirected
   */
  directed: boolean;
  /**
   * True if user tells us that the graph is a tree or DAG or specifies an explicit parent-child relation between any two nodes. Given a parent-child relation means, include an edge from parent to child. This property should be automatically updated when parent-child relations are specified.
   */
  hasParents?: boolean;
  /**
   * mapping from style names to style definition objects
   */
  styles?: {
    /**
     * style definition objects mapping style attribute names to values
     */
    [k: string]: {
      nodeShape?: NodeShape;
      nodeWidthToHeight?: NodeWidthToHeight;
      nodeSize?: NodeSize;
      lineColor?: LineColor;
      lineWidth?: LineWidth;
      lineStyle?: LineStyle;
      arrowStyle?: ArrowStyle;
      fillColor?: FillColor;
      fontFamily?: FontFamily;
      fontSize?: FontSize;
      fontStyle?: FontStyle;
      fontWeight?: FontWeight;
      fontVariant?: FontVariant;
      fontColor?: FontColor;
      labelAnchor?: TextAnchor;
      [k: string]: unknown;
    };
  };
  /**
   * Array of positioning constraints on node (x,y) coordinates of nodes, where (0,0) is the bottom-left point of the canvas, with x-coordinates increasing to the right and y-coordinates increasing to the top. Positioning requests for nodes should be treated as requests for corresponding constraints on the node positions.
   */
  constraints?: {
    meaning?: string;
    constraints?: string[];
  }[];
  /**
   * maps node names to attribute objects
   */
  nodes: {
    /**
     * maps attribute names to attribute values
     */
    [k: string]: {
      nodeShape?:
        | "circle"
        | "double-circle"
        | "square"
        | "diamond"
        | "triangle"
        | "ellipse"
        | "rectangle"
        | "invisible";
      /**
       * Node size relative to a base size; if not specified, the node size is 1
       */
      nodeSize?: number;
      /**
       * Width to height ratio of a node; if not specified, the ratio is 1
       */
      nodeWidthToHeight?: number;
      label?: Label;
      labelOffset?: Offset;
      style?: Style;
      lineColor?: LineColor;
      fillColor?: FillColor;
      fillStyle?: FillStyle;
      lineWidth?: LineWidth;
      lineStyle?: LineStyle;
      fontSize?: FontSize;
      fontFamily?: FontFamily;
      fontColor?: FontColor;
      fontStyle?: FontStyle;
      fontVariant?: FontVariant;
      fontWeight?: FontWeight;
      labelAnchor?: TextAnchor;
      /**
       * Extra data associated with this node as key-value pairs. Any properties not in the schema should be specified in this object.
       */
      data?: {
        [k: string]: string | number | boolean;
      };
    };
  };
  /**
   * maps edge names to attribute objects; by default, an edge from node A to node B is named AB
   */
  edges: {
    /**
     * maps attribute names to attribute values
     */
    [k: string]: {
      /**
       * name of the node from which the edge originates
       */
      source: string;
      /**
       * name of the node to which the edge connects
       */
      target: string;
      label?: Label;
      /**
       * An optional numeric value associated with the edge.
       */
      weight?: number;
      labelOffset?: Offset;
      weightOffset?: Offset;
      style?: Style;
      /**
       * angle relative to the direction between the node centers; in undirected graphs, the node whose name is first lexographically is taken as the source for this purpose.
       */
      angleLeaving?: number;
      /**
       * angle relative to the direction between the node centers; in undirected graphs, the node whose name is second lexographically is taken as the target for this purpose.
       */
      angleEntering?: number;
      /**
       * controls the curvature of an edge near the source node
       */
      softnessLeaving?: number;
      /**
       * controls the curvature of an edge near the target node
       */
      softnessEntering?: number;
      /**
       * For self-loop edges, the angle at which the loop points, counter-clockwise from positive x direction
       */
      loopDirection?: number;
      lineColor?: LineColor;
      arrowStyle?: ArrowStyle;
      lineWidth?: LineWidth;
      lineStyle?: LineStyle;
      fontSize?: FontSize;
      fontFamily?: FontFamily;
      fontColor?: FontColor;
      fontStyle?: FontStyle;
      fontVariant?: FontVariant;
      fontWeight?: FontWeight;
      labelAnchor?: TextAnchor;
      /**
       * Key-value pairs specifying extra data associated with this edge. Any properties not in the schema should be specified in this object.
       */
      data?: {
        [k: string]: string | number | boolean;
      };
    };
  };
  /**
   * maps decoration names to decoration objects (texts and rectangles to display on top of the graph)
   */
  decorations?: {
    /**
     * maps attribute names to attribute values
     */
    [k: string]: {
      type: "text" | "region";
      /**
       * x-coordinate of the center (left boundary of canvas is zero, right boundary is one)
       */
      x: number;
      /**
       * y-coordinate of the center (lower boundary of canvas is zero, upper boundary is one)
       */
      y: number;
      style?: Style;
      fillColor?: FillColor;
      fillStyle?: FillStyle;
      lineColor?: LineColor;
      lineWidth?: LineWidth;
      lineStyle?: LineStyle;
      fontSize?: FontSize;
      fontFamily?: FontFamily;
      /**
       * Text overlay
       */
      text?: string;
      region?: {
        /**
         * Relative width of region (as proportion of canvas width)
         */
        width: number;
        /**
         * Relative height of region (as proportion of canvas height)
         */
        height: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  _adjacency?: {
    [k: string]: unknown;
  };
  /**
   * mapping from node names to array holding (x,y) coordinates of the node
   */
  _positions?: {
    /**
     * @minItems 2
     * @maxItems 2
     */
    [k: string]: [number, number];
  };
}
